////////////////////////////////////////////////////////////////////////////////

////////////    Using shuffle/permutation functions for Button   ///////////////

////////////////////////////////////////////////////////////////////////////////

function onOpen() { 
  var ui = SpreadsheetApp.getUi();
  
  ui.createMenu('GET RESULT')
      .addItem('GET RESULT', 'distributeTargetValues')
      .addToUi();      
}

  function distributeTargetValues() {
    var sheet = SpreadsheetApp.getActiveSheet();
    var range = sheet.getDataRange();
    var values = range.getValues();
    var targetRowValue = 0;
    var targetColumnValue = 0;
    var columnBValue = 0;    

    for (var i = 1; i < values.length; i++) {
      var row = values[i];     

      var option = row[0];
      columnBValue = row[1];

      var dvd1 = 0;
      var dvd2 = 0;

      if (row[2] == 0 && row[3] == 0 && row[4] == 0 && row[5] == 0){
      
        if (option == "£12,500 to £50,000") {
          targetRowValue = 8000;
          targetColumnValue = 2000;
        } else if (option == "£50,001 to £150,000") {
          targetRowValue = 4000;
          targetColumnValue = 1000;
        } else if ( option == "Less than £12,500") {
          targetRowValue = 40000;
          targetColumnValue = 10000;
        }
        
        if(columnBValue % 1 === 0){
          columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
        }

        if (targetRowValue < 40000){
          if (columnBValue < 10000){
            dvd1 = 1
            var targetvalue1 = columnBValue * 10;        
          } else if (columnBValue >=10000) {
            dvd2 = 1;
            var targetvalue1 = columnBValue / 10; 
          }
        } else {
          var targetvalue1 = columnBValue * 10;         
          
        }        

        var dd1 = Number.POSITIVE_INFINITY;

        for (var l = 2; l <= 4; l++) {
          var d_target = Math.abs(targetvalue1/l-targetColumnValue);
          if (d_target <= dd1 ){
            var dv1 = l;
            dd1 = d_target;
          }
        }
       
        var dd2 = Number.POSITIVE_INFINITY;
        for (var l = 2; l <= 4; l++){
          var d_target = Math.abs(columnBValue/l - targetColumnValue);
          if(d_target <= dd2){
            var dv2 = l;
            dd2 = d_target;
          }
        }

        var calculatedValues = [];

        var method1 = targetvalue1 / dv1;
        var method2 = targetvalue1;        
        var method3 = columnBValue / dv2;        
        var method4 = columnBValue;   
        
        var calculatedValues = [];
        calculatedValues.push(method1);
        calculatedValues.push(method2);
        calculatedValues.push(method3);
        calculatedValues.push(method4);
        
        var closestMethod = 0;
        var closestDifference = Number.POSITIVE_INFINITY;
        
        for (var j = 0; j < calculatedValues.length; j++) {
          var calculatedValue = calculatedValues[j];
          var difference = Math.abs(targetRowValue - calculatedValue * 4);
          if (difference < closestDifference) {
            closestMethod = j;
            closestDifference = difference;
          }
        }

        var arr = [0, 1, 2, 3, 4, 5, 6];
        var variations = ['-15~-10%', '-10~-5%', '-5~0%', '5~10%', '10~15%', '15~20%', '20~25%'];

        var permu = permutation(arr, 4);

        var rule = Math.round((permu.length-1) * Math.random()) ;

        var selRule = permu[rule];       
    
        var result = [];
        var dvd_sum = 0;

        switch (closestMethod) {
          case 0:            
            switch (dv1){
              case 1:              
                if (dvd2 == 1){                 
                  for (var k = 0; k<4; k++){                                  
                    var diff1 = Math.abs(targetRowValue - dvd_sum);      
                    var re = getResult(method1, selRule[k]);              
                    dvd_sum = dvd_sum + re;
                    var diff2 = Math.abs(targetRowValue-dvd_sum);                    
                    if (diff1 > diff2){
                      result.push(re);
                    }else{
                      result.push('0');
                    }                   
                  }
                  
                } else if (dvd1 == 1) {
                  result.push(method1);
                  result.push(0);
                  result.push(0);
                  result.push(0);
                }
                break;
              case 2:    
                var v= getResult(method1, selRule[0])             
                result.push(v);
                result.push(targetvalue1 - v);
                result.push(0);
                result.push(0);
                break;
              case 3:      
                for (var k = 0; k<3; k++){                                  
                  var diff1 = Math.abs(targetRowValue - dvd_sum);         
                  var re = getResult(method1, selRule[k]);           
                  dvd_sum = dvd_sum + re;
                  var diff2 = Math.abs(targetRowValue-dvd_sum);
                  
                  if (diff1 > diff2){
                    result.push(re);
                  }else{
                    result.push('0');
                  }                   
                }
                result.push('0');
                break;
              case 4:   
                for (var k = 0; k<4; k++){                                  
                    var diff1 = Math.abs(targetRowValue - dvd_sum); 
                    var re = getResult(method1, selRule[k]);                   
                    dvd_sum = dvd_sum + re;
                    var diff2 = Math.abs(targetRowValue-dvd_sum);
                   
                    if (diff1 > diff2){
                      result.push(re);
                    }else{
                      result.push('0');
                    }                   
                  }
                break;
            }
            break;
          case 1:  
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method2, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }                   
            }
            break;
          case 2:          
            switch (dv2){              
              case 2:
                var re = getResult(method3, selRule[0])
                result.push(re);
                result.push(columnBValue - re);
                result.push(0);
                result.push(0);                
                break;
              case 3:
                for (var k = 0; k<3; k++){                                  
                  var diff1 = Math.abs(targetRowValue - dvd_sum); 
                  var re = getResult(method3, selRule[k]);                   
                  dvd_sum = dvd_sum + re;
                  var diff2 = Math.abs(targetRowValue-dvd_sum);
                  
                  if (diff1 > diff2){
                    result.push(re);
                  }else{
                    result.push('0');
                  }                   
                }
                result.push('0');
                break;
              case 4:     
                for (var k = 0; k<4; k++){                                  
                  var diff1 = Math.abs(targetRowValue - dvd_sum);  
                 
                  var re = getResult(method3, selRule[k]);                                                                                                               
                  dvd_sum = dvd_sum + re;
                  var diff2 = Math.abs(targetRowValue-dvd_sum);
                  
                  if (diff1 > diff2){
                    result.push(re);
                  }else{
                    result.push('0');
                  }                   
                }
                break;
            }        
            break;
          case 3:
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);
              var re = getResult(method4, selRule[k]);                     
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }                   
            }
            break;
        }  

        result = shuffle(result);

        for (var m = 0; m < result.length; m++) {
          var newValue = result[m];
          row[m + 2] = newValue;
         
        }
        row[1]=columnBValue;            

        for (var p=0; p< selRule.length; p++){
          var repVar = selRule[p];
          selRule[p] = variations[repVar];                 
        }
        
        row[6]=selRule.toString();
        values[i] = row;

        sheet.getRange("A"+(i+1)).setValue(values[i][0]);
        sheet.getRange("B"+(i+1)).setValue(values[i][1]);
        sheet.getRange("C"+(i+1)).setValue(values[i][2]);
        sheet.getRange("D"+(i+1)).setValue(values[i][3]);
        sheet.getRange("E"+(i+1)).setValue(values[i][4]);
        sheet.getRange("F"+(i+1)).setValue(values[i][5]);
        sheet.getRange("G"+(i+1)).setValue(values[i][6]);

      }else{        
        values[i] = row;
        continue;
      }
    }  
    
  }

function getResult(method, col){  

  switch (col){

    case 0:
      result = parseFloat((method * (0.85 + Math.random() * 0.05)).toFixed(2));
      break;
    case 1:
      result = parseFloat((method * (0.9 + Math.random() * 0.05)).toFixed(2));
      break;
    case 2:
      result = parseFloat((method * (0.95 + Math.random() * 0.05)).toFixed(2));
      break;
    case 3:
      result = parseFloat((method * (1.05 + Math.random() * 0.05)).toFixed(2));
      break;
    case 4:
      result = parseFloat((method * (1.1 + Math.random() * 0.05)).toFixed(2));
      break;
    case 5:
      result = parseFloat((method * (1.15 + Math.random() * 0.05)).toFixed(2));
      break;
    case 6:
      result = parseFloat((method * (1.2 + Math.random() * 0.05)).toFixed(2));
      break;
  }
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0;

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
  }

  return array;
}



function permutation(arr, len){  
  var result = [];
  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  f([], arr);
  return result;
}




////////////////////////////////////////////////////////////////////////////////

///////////////////    Using the Trigger functions   ///////////////////////////

////////////////////////////////////////////////////////////////////////////////

function onEdit(e){

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sheet1');

  const range = e.range;
  var setColumn = range.getColumn();  
  var setRow = range.getRow();
  var dvd1 = dvd2 = 0;
  if(setColumn == 2 && setRow != 1){    
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow,1).getValue();
    
    if (option == "£12,500 to £50,000") {
      targetRowValue = 8000;
      targetColumnValue = 2000;
    } else if (option == "£50,001 to £150,000") {
      targetRowValue = 4000;
      targetColumnValue = 1000;
    } else if ( option == "Less than £12,500") {
      targetRowValue = 40000;
      targetColumnValue = 10000;
    }

    var columnBValue_origin = columnBValue;   

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if (targetRowValue == 4000){
      if (columnBValue < 1011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 1011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if ( targetRowValue == 8000){
      if (columnBValue < 2011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 2011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if (targetRowValue == 40000){
      if (columnBValue < 10011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 10011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    }
   
    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 2; l <= 4; l++) {
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;
      }
    }    
    
    var dd2 = Number.POSITIVE_INFINITY;
    for (var l = 2; l <= 4; l++){
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }
    
    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    var method2 = targetvalue1;        
    var method3 = columnBValue / dv2;        
    var method4 = columnBValue_origin;   
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    for (var j = 0; j < calculatedValues.length; j++) {
      var calculatedValue = calculatedValues[j];
      var difference = Math.abs(targetRowValue - calculatedValue * 4);      
      if (difference < closestDifference) {
        closestMethod = j;
        closestDifference = difference;
      }
    }

    if (targetRowValue == 8000){
      if (columnBValue_origin >= 26000 && columnBValue_origin <= 47000){
        closestMethod = 3;
        method4 = columnBValue_origin / 10; 
      }
    }    

    var arr = [0, 1, 2, 3, 4, 5, 6];
    var variations = ['-15~-10%', '-10~-5%', '-5~0%', '5~10%', '10~15%', '15~20%', '20~25%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 

    if (closestMethod == 3){
      selRule = [];
    }

    var result = [];
    var dvd_sum = 0;
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }

    switch (closestMethod) {
      case 0:            
        switch (dv1){
          case 1:              
            if (dvd2 == 1){                 
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);      
                var re = getResult(method1, selRule[k]);              
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);                    
                if (diff1 > diff2){
                  result.push(re);
                }else{
                  result.push('0');
                }                   
              }
              
            } else if (dvd1 == 1) {
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
            }
            break;
          case 2:    
            var v= getResult(method1, selRule[0])             
            result.push(v);
            result.push(targetvalue1 - v);
            result.push(0);
            result.push(0);
            break;
          case 3:      
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);         
              var re = getResult(method1, selRule[k]);           
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }                   
            }
            result.push('0');
            break;
          case 4:   
            for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum); 
                var re = getResult(method1, selRule[k]);                   
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  result.push(re);
                }else{
                  result.push('0');
                }                   
              }
            break;
        }
        break;
      case 1:  
        if (dvd1==1){
          result.push(columnBValue_origin *10);
          result.push(0);
          result.push(0);
          result.push(0);
        } else if (dvd2 == 1) {
          for (var k = 0; k<4; k++){                                  
            var diff1 = Math.abs(targetRowValue - dvd_sum); 
            var re = getResult(method2, selRule[k]);                   
            dvd_sum = dvd_sum + re;
            var diff2 = Math.abs(targetRowValue-dvd_sum);
            
            if (diff1 > diff2){
              result.push(re);
            }else{
              result.push('0');
            }                   
          }
        }
        break;
      case 2:          
        switch (dv2){              
          case 2:
            var re = getResult(method3, selRule[0])
            result.push(re);
            result.push(columnBValue - re);
            result.push(0);
            result.push(0);                
            break;
          case 3:
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method3, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);                  
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }                   
            }
            result.push('0');
            break;
          case 4:     
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);                    
              var re = getResult(method3, selRule[k]);                                                                                                               
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }                   
            }
            break;
        }        
        break;
      case 3:
        
        result.push(method4);
        result.push(method4);
        result.push(0);
        result.push(0);
        break;
    } 

    result = shuffle(result);

    for (var p=0; p< selRule.length; p++){
      var repVar = selRule[p];
      selRule[p] = variations[repVar];                 
    }

    selRule = selRule.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue_origin);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    
    sheet.getRange("C"+(setRow)).setValue(result[0]);
    sheet.getRange("D"+(setRow)).setValue(result[1]);
    sheet.getRange("E"+(setRow)).setValue(result[2]);
    sheet.getRange("F"+(setRow)).setValue(result[3]);
    sheet.getRange("G"+(setRow)).setValue(selRule);
  }   
}

function getResult(method, col){  

  switch (col){

    case 0:
      result = parseFloat((method * (0.85 + Math.random() * 0.05)).toFixed(2));
      break;
    case 1:
      result = parseFloat((method * (0.9 + Math.random() * 0.05)).toFixed(2));
      break;
    case 2:
      result = parseFloat((method * (0.95 + Math.random() * 0.05)).toFixed(2));
      break;
    case 3:
      result = parseFloat((method * (1.05 + Math.random() * 0.05)).toFixed(2));
      break;
    case 4:
      result = parseFloat((method * (1.1 + Math.random() * 0.05)).toFixed(2));
      break;
    case 5:
      result = parseFloat((method * (1.15 + Math.random() * 0.05)).toFixed(2));
      break;
    case 6:
      result = parseFloat((method * (1.2 + Math.random() * 0.05)).toFixed(2));
      break;
  }
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0;

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}


///////////////////////////////////////////////////////////////////////////////

///////////////////////    Last Update    ////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////

function onEdit(e){

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sheet1');

  const range = e.range;
  var setColumn = range.getColumn();  
  var setRow = range.getRow();
  var dvd1 = dvd2 = 0;
  var compResult = [];
   
  if(setColumn == 2 && setRow != 1){    
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow,1).getValue();
    
    if (option == "£12,500 to £50,000") {
      targetRowValue = 8000;
      targetColumnValue = 2000;
    } else if (option == "£50,001 to £150,000") {
      targetRowValue = 4000;
      targetColumnValue = 1000;
    } else if ( option == "Less than £12,500") {
      if ( columnBValue <= 8000){
        targetRowValue = 8000;
        targetColumnValue = 2000;
      } else {
        targetRowValue = 40000;
        targetColumnValue = 10000;
      }
      
    }

    if (targetRowValue == 4000){
      if (columnBValue < 1011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 1011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if ( targetRowValue == 8000){
      if (columnBValue < 2011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 2011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if (option == "Less than £12,500"){
      if ( targetRowValue == 8000){
        if (columnBValue < 3011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 3011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }
   
    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 2; l <= 4; l++) {
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;
      }
    }    
    
    var dd2 = Number.POSITIVE_INFINITY;
    for (var l = 2; l <= 4; l++){
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }
    
    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,500" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,500" ){
      var method4 = columnBValue;   
    }
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    for (var j = 0; j < calculatedValues.length; j++) {
      var calculatedValue = calculatedValues[j];
      var difference = Math.abs(targetRowValue - calculatedValue * 4);      
      if (difference < closestDifference) {
        closestMethod = j;
        closestDifference = difference;
      }
    }

    var arr = [0, 1, 2, 3];
    var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
    var dvd_sum = 0;
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }

    switch (closestMethod) {
      case 0:            
        switch (dv1){          
          case 1:              
            if (dvd2 == 1){                 
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);      
                var re = getResult(method1, selRule[k]);              
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);                    
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
              
            } else if (dvd1 == 1) {
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
            }
            break;
          case 2:    
            var v= getResult(method1, selRule[0])             
            result.push(v);
            result.push(targetvalue1 - v);
            result.push(0);
            result.push(0);
            break;
          case 3:      
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);         
              var re = getResult(method1, selRule[k]);           
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                      
            }
            result.push('0');
            break;
          case 4:   
            for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum); 
                var re = getResult(method1, selRule[k]);                   
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
            break;
        }
        break;
      case 1:  
         if (dvd2 == 1){
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method2, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }
            }                   
          } else if (dvd1 == 1) {
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);            
          }       
        break;
      case 2:          
        switch (dv2){              
          case 2:
            var re = getResult(method3, selRule[0])
            result.push(re);
            result.push(columnBValue - re);
            result.push(0);
            result.push(0);                
            break;
          case 3:
          
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method3, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);                  
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                         
            }
            result.push('0');
            break;
          case 4:     
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);                    
              var re = getResult(method3, selRule[k]);                                                                                                               
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                        
            }
            break;
        }        
        break;
      case 3:      
        for (var k=0; k<4; k++){
          result.push(getResult(method4, selRule[k]));
        }
        break;
    } 

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
        
    var countZero = 0;

    for (var i=0; i<result.length; i++){
      if(result[i] == 0){       
        countZero++;
      }
    }
    
    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2 || countZero == 3){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }
    
    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    
    sheet.getRange("C"+(setRow)).setValue(result[0]);
    sheet.getRange("D"+(setRow)).setValue(result[1]);
    sheet.getRange("E"+(setRow)).setValue(result[2]);
    sheet.getRange("F"+(setRow)).setValue(result[3]);
    sheet.getRange("G"+(setRow)).setValue(newIndex);

    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("H"+(setRow)).setValue(subresult[0]);
    sheet.getRange("I"+(setRow)).setValue(subresult[1]);
    sheet.getRange("J"+(setRow)).setValue(subresult[2]);
    sheet.getRange("K"+(setRow)).setValue(subresult[3]);
    sheet.getRange("L"+(setRow)).setValue(sum);
    sheet.getRange("M"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("N"+(setRow)).setValue(recal);
  }  
 
}

function getResult(method, col){  

  switch (col){

      case 0:
        result = parseFloat((method * (0.4 + Math.random() * 0.35)).toFixed(2));
        break;
      case 1:
        result = parseFloat((method * (0.75 + Math.random() * 0.25)).toFixed(2));
        break;
      case 2:
        result = parseFloat((method * (1 + Math.random() * 0.25)).toFixed(2));
        break;
      case 3:
        result = parseFloat((method * (1.25 + Math.random() * 0.5)).toFixed(2));
        break;
    }
 
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}



//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////


function onEdit(e){

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sheet1');

  const range = e.range;
  var setColumn = range.getColumn();  
  var setRow = range.getRow();
  var dvd1 = dvd2 = 0;
  var compResult = [];
   
  if(setColumn == 2 && setRow != 1){    
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow,1).getValue();

    if (columnBValue <= 200) {
      columnBValue = 200;
    }
    
    if (option == "£12,500 to £50,000") {
      targetRowValue = 8000;
      targetColumnValue = 2000;
    } else if (option == "£50,001 to £150,000") {
      targetRowValue = 4000;
      targetColumnValue = 1000;
    } else if ( option == "Less than £12,500") {
      if ( columnBValue <= 8000){
        targetRowValue = 8000;
        targetColumnValue = 2000;
      } else {
        targetRowValue = 40000;
        targetColumnValue = 10000;
      }
      
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if (targetRowValue == 4000){
      if (columnBValue < 1011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 1011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if ( targetRowValue == 8000){
      if (columnBValue < 2011){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 2011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if (option == "Less than £12,500"){
      if ( targetRowValue == 8000){
        if (columnBValue < 3011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 3011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }
   
    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 2; l <= 4; l++) {
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;
      }
    }    
    
    var dd2 = Number.POSITIVE_INFINITY;
    for (var l = 2; l <= 4; l++){
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }
    
    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,500" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,500" ){
      var method4 = columnBValue;   
    }
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    for (var j = 0; j < calculatedValues.length; j++) {
      var calculatedValue = calculatedValues[j];
      var difference = Math.abs(targetRowValue - calculatedValue * 4);      
      if (difference < closestDifference) {
        closestMethod = j;
        closestDifference = difference;
      }
    }

    var arr = [0, 1, 2, 3];
    var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
    var dvd_sum = 0;
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }

    switch (closestMethod) {
      case 0:            
        switch (dv1){          
          case 1:              
            if (dvd2 == 1){                 
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);      
                var re = getResult(method1, selRule[k]);              
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);                    
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
              
            } else if (dvd1 == 1) {
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
            }
            break;
          case 2:    
            var v= getResult(method1, selRule[0])             
            result.push(v);
            result.push(targetvalue1 - v);
            result.push(0);
            result.push(0);
            break;
          case 3:      
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);         
              var re = getResult(method1, selRule[k]);           
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                      
            }
            result.push('0');
            break;
          case 4:   
            for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum); 
                var re = getResult(method1, selRule[k]);                   
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
            break;
        }
        break;
      case 1:  
         if (dvd2 == 1){
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method2, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }
            }                   
          } else if (dvd1 == 1) {
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);            
          }       
        break;
      case 2:          
        switch (dv2){              
          case 2:
            var re = getResult(method3, selRule[0])
            result.push(re);
            result.push(columnBValue - re);
            result.push(0);
            result.push(0);                
            break;
          case 3:
          
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method3, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);                  
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                         
            }
            result.push('0');
            break;
          case 4:     
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);                    
              var re = getResult(method3, selRule[k]);                                                                                                               
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                        
            }
            break;
        }        
        break;
      case 3:      
        for (var k=0; k<4; k++){
          result.push(getResult(method4, selRule[k]));
        }
        break;
    } 

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
        
    var countZero = 0;

    for (var i=0; i<result.length; i++){
      if(result[i] == 0){       
        countZero++;
      }
    }
    
    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2 || countZero == 3){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }
    
    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    
    sheet.getRange("C"+(setRow)).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);
    sheet.getRange("D" + (setRow)).setValue(est1);
    sheet.getRange("E" +(setRow)).setValue(result[0] * est1 / 100);
    sheet.getRange("F" +(setRow)).setValue(result[0] * est1 / 100 * 5);
    sheet.getRange("G" +(setRow)).setValue(result[0] * est1 / 100 * 4);

    sheet.getRange("H"+(setRow)).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);
    sheet.getRange("I" + (setRow)).setValue(est2);
    sheet.getRange("J" +(setRow)).setValue(result[1] * est2 / 100);
    sheet.getRange("K" +(setRow)).setValue(result[1] * est2 / 100 * 5);
    sheet.getRange("L" +(setRow)).setValue(result[1] * est2 / 100 * 4);

    sheet.getRange("M"+(setRow)).setValue(result[2]);  
    var est3 = (Math.random()*1.5 + 11).toFixed(4);
    sheet.getRange("N" + (setRow)).setValue(est3);
    sheet.getRange("O" +(setRow)).setValue(result[2] * est3 / 100);
    sheet.getRange("P" +(setRow)).setValue(result[2] * est3 / 100 * 5);
    sheet.getRange("Q" +(setRow)).setValue(result[2] * est3 / 100 * 4);

    sheet.getRange("R"+(setRow)).setValue(result[3]);
    var est4 = (Math.random()*1.5 + 11).toFixed(4);
    sheet.getRange("S" + (setRow)).setValue(est4);
    sheet.getRange("T" +(setRow)).setValue(result[3] * est4 / 100);
    sheet.getRange("U" +(setRow)).setValue(result[3] * est4 / 100 * 5);
    sheet.getRange("V" +(setRow)).setValue(result[3] * est4 / 100 * 4);

    sheet.getRange("W"+(setRow)).setValue(newIndex);

    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("X"+(setRow)).setValue(subresult[0]);
    sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
    sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
    sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
    sheet.getRange("AB"+(setRow)).setValue(sum);
    sheet.getRange("AC"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("AD"+(setRow)).setValue(recal);
  }  
 
}

function getResult(method, col){  

  switch (col){

      case 0:
        result = parseFloat((method * (0.4 + Math.random() * 0.35)).toFixed(2));
        break;
      case 1:
        result = parseFloat((method * (0.75 + Math.random() * 0.25)).toFixed(2));
        break;
      case 2:
        result = parseFloat((method * (1 + Math.random() * 0.25)).toFixed(2));
        break;
      case 3:
        result = parseFloat((method * (1.25 + Math.random() * 0.5)).toFixed(2));
        break;
    }
 
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}




////////////////////////////////////////////////////////////////////////////////////

//////////////////////////Using Set Formula with apps script////////////////////////

////////////////////////////////////////////////////////////////////////////////////

function onEdit(e){

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sheet1');

  const range = e.range;
  var setColumn = range.getColumn();  
  var setRow = range.getRow();
  var dvd1 = dvd2 = 0;
  var compResult = [];
   
  if(setColumn == 2 && setRow != 1){    
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow,1).getValue();

    if (columnBValue <= 200) {
      columnBValue = 200;
    }
    
    if (option == "£12,571 to £50,270") {
      var targetRowValue = 8000;
       var targetColumnValue = 4000;
    }     
    else if ( option == "Less than £12,570") {
      if ( columnBValue <= 8000){
        var targetRowValue = 8000;
         var targetColumnValue = 4000;
      } else {
        var targetRowValue = 40000;
         var targetColumnValue = 20000;
      }
      
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if ( targetRowValue == 8000){
      if (columnBValue < 2011){
        dvd1 = 1;
        var targetvalue1  = columnBValue * 10;
      } else if (columnBValue >= 2011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if (option == "Less than £12,570"){
      if ( targetRowValue == 8000){
        if (columnBValue < 3011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 3011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }

    // SpreadsheetApp.getUi().alert(targetvalue1);
   
    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++) {
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;
      }
    }    

    var dd2 = Number.POSITIVE_INFINITY;
    
    for (var l =1; l <= 4; l++){
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }
        
    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,570" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,570" ){
      var method4 = columnBValue;   
    }
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    for (var j = 0; j < calculatedValues.length; j++) {
      var calculatedValue = calculatedValues[j];

      if (j == 0 ) {
        var multi_number = dv1;
      } else if (j == 1 && j == 3 ){
        var multi_number = 4;
      } else if (j == 2) {
        var multi_number = dv2;
      }

      var difference = Math.abs(targetRowValue - calculatedValue * multi_number);  

      if (difference < closestDifference) {
        closestMethod = j;
        closestDifference = difference;
      }
    }

    var arr = [0, 1, 2, 3];
    var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
    var dvd_sum = 0;
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }

    switch (closestMethod) {
      case 0:            
        switch (dv1){          
          case 1:              
            if (dvd2 == 1){                 
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);      
                var re = getResult(method1, selRule[k]);              
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);                    
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
              
            } else if (dvd1 == 1) {
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
            }
            break;
          case 2:    
            var v= getResult(method1, selRule[0])             
            result.push(v);
            result.push(targetvalue1 - v);
            result.push(0);
            result.push(0);
            break;
          case 3:      
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);         
              var re = getResult(method1, selRule[k]);           
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                      
            }
            result.push('0');
            break;
          case 4:   
            for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum); 
                var re = getResult(method1, selRule[k]);                   
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
            break;
        }
        break;
      case 1:  
         if (dvd2 == 1){
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method2, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }
            }                   
          } else if (dvd1 == 1) {
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);            
          }       
        break;
      case 2:          
        switch (dv2){    
          case 1:              
            if (dvd2 == 1){                 
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);      
                var re = getResult(method3, selRule[k]);              
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);                    
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
              
            } else if (dvd1 == 1) {
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
            }
            break;          
          case 2:
            var re = getResult(method3, selRule[0])
            result.push(re);
            result.push(columnBValue - re);
            result.push(0);
            result.push(0);                
            break;
          case 3:          
            for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method3, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);                  
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                         
            }
            result.push('0');
            break;
          case 4:     
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);                    
              var re = getResult(method3, selRule[k]);                                                                                                               
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                        
            }
            break;
        }        
        break;
      case 3:      
        for (var k=0; k<4; k++){
          result.push(getResult(method4, selRule[k]));
        }
        break;
    } 

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
        
    var countZero = 0;

    for (var i=0; i<result.length; i++){
      if(result[i] == 0){       
        countZero++;
      }
    }
    
    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2 || countZero == 3){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }
    
    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    
    var deduction = 0;

    var pos0_0 = "C" + (setRow);
    var pos0_1 = "D" + (setRow);
    var pos0_2 = "E" + (setRow);
    var pos0_3 = "F" + (setRow);
    var pos0_4 = "G" + (setRow);

    sheet.getRange(pos0_0).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos0_1).setValue(est1.toString() + "%");   
    sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
    sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
    sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5); 

    var pos1_0 = "H" + (setRow);
    var pos1_1 = "I" + (setRow);
    var pos1_2 = "J" + (setRow);
    var pos1_3 = "K" + (setRow);
    var pos1_4 = "L" + (setRow);

    sheet.getRange(pos1_0).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos1_1).setValue(est2.toString() + "%");
    sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
    sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
    sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 

    var pos2_0 = "M" + (setRow);
    var pos2_1 = "N" + (setRow);
    var pos2_2 = "O" + (setRow);
    var pos2_3 = "P" + (setRow);
    var pos2_4 = "Q" + (setRow);

    sheet.getRange(pos2_0).setValue(result[2]);
    var est3 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos2_1).setValue(est3.toString() + "%");
    sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
    sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
    sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

    var pos3_0 = "R" + (setRow);
    var pos3_1 = "S" + (setRow);
    var pos3_2 = "T" + (setRow);
    var pos3_3 = "U" + (setRow);
    var pos3_4 = "V" + (setRow);

    sheet.getRange(pos3_0).setValue(result[3]);
    var est4 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos3_1).setValue(est4.toString() + "%");
    sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
    sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
    sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
      
    
    sheet.getRange("W"+(setRow)).setValue(newIndex);

    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("X"+(setRow)).setValue(subresult[0]);
    sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
    sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
    sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
    sheet.getRange("AB"+(setRow)).setValue(sum);
    sheet.getRange("AC"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("AD"+(setRow)).setValue(recal);
  }  
 
}

function getResult(method, col){  

  switch (col){

      case 0:
        result = parseFloat((method * (0.4 + Math.random() * 0.35)).toFixed(2));
        break;
      case 1:
        result = parseFloat((method * (0.75 + Math.random() * 0.25)).toFixed(2));
        break;
      case 2:
        result = parseFloat((method * (1 + Math.random() * 0.25)).toFixed(2));
        break;
      case 3:
        result = parseFloat((method * (1.25 + Math.random() * 0.5)).toFixed(2));
        break;
    }
 
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}




//////////////////////////////////////////////////////////////////////////////////////

//////////////////////////// ADDED NEW RULE //////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////

function onEdit(e){

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sheet1');

  const range = e.range;
  var setColumn = range.getColumn();  
  var setRow = range.getRow();
  var dvd1 = dvd2 = 0;
  var compResult = [];
   
  if(setColumn == 2 && setRow != 1){    
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow,1).getValue();

    if (columnBValue <= 200) {
      columnBValue = 200;
    }
    
    if (option == "£12,571 to £50,270") {
      var targetRowValue = 8000;
       var targetColumnValue = 3450;
    }     
    else if ( option == "Less than £12,570") {
      if ( columnBValue <= 8000){
        var targetRowValue = 8000;
        var targetColumnValue = 3450;
      } else {
        var targetRowValue = 40000;
        var targetColumnValue = 3450;
      }      
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if ( targetRowValue == 8000){
      if (columnBValue < 2011){
        dvd1 = 1;
        var targetvalue1  = columnBValue * 10;
      } else if (columnBValue >= 2011){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if (option == "Less than £12,570"){
      if ( targetRowValue == 8000){
        if (columnBValue < 3011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 3011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }
   
    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++) {
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;
      }
    }    

    var dd2 = Number.POSITIVE_INFINITY;
    
    for (var l =1; l <= 4; l++){
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }    

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,570" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,570" ){
      var method4 = columnBValue;   
    }    

    var arr = [0, 1, 2, 3];
    var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 

    var dvd_sum = 0;
    var multi_number = 0;

    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }  

    for (var selectedMethod = 0; selectedMethod < 4; selectedMethod++){

      var result = [];
      var newIndex = [];

      switch (selectedMethod) {
        case 0:    
          multi_number = dv1;        
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              var v= getResult(method1, selRule[0])             
              result.push(v);
              result.push(targetvalue1 - v);
              result.push(0);
              result.push(0);
              break;
            case 3:
              for (var k = 0; k<3; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);         
                var re = getResult(method1, selRule[k]);           
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                      
              }
              result.push('0');
              break;
            case 4:
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum); 
                var re = getResult(method1, selRule[k]);                   
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
              break;
          }
          break;
        case 1:  
          multi_number = 4;
          if (dvd2 == 1){
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method2, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }
            }                   
          } else if (dvd1 == 1) {
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);            
          }    
          break;
        case 2:          
          multi_number = dv2;
          switch(dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              var re = getResult(method3, selRule[0])
              result.push(re);
              result.push(columnBValue - re);
              result.push(0);
              result.push(0);                
              break;
            case 3:
              for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method3, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);                  
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                         
              }
              result.push('0');
              break;
            case 4:
              for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);                    
              var re = getResult(method3, selRule[k]);                                                                                                               
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                        
              }
              break;
          }
          break;
        case 3:      
          multi_number = 4;
          for (var k=0; k<4; k++){
          result.push(getResult(method4, selRule[k]));
          }
          break;          
      }

      for (var i =0; i<result.length; i++){
        compResult[i] = result[i];
      }      
        
      var countZero = 0;      

      for (var i=0; i<result.length; i++){
        if(result[i] == 0){       
          countZero++;
        }
      }
    
      if (countZero == 0){
        result = shuffle(result);
      } else if (countZero == 1) {
        while (result[0] != 0){
          result = shuffle(result);
        }
      } else if (countZero == 2 || countZero == 3){      
        while ((result[0] != 0) || (result[3] != 0)){
          result = shuffle(result);
        }
      }

      for (var i=0; i<result.length; i++){
        for (var j = 0; j<compResult.length; j++){
          if(result[i] == compResult[j]){
            newIndex.push(variations[j]);          
            compResult[j] = 1000000;
            break;
          }
        }
      }
    
      for (var i = 0; i < result.length; i++){
        if ( result[i] == 0 ){
          result[i] = '';
        }
      }
      
      newIndex = newIndex.toString();      

      if ((selectedMethod == 1 && dvd1 == 1) || selectedMethod == 3){
        sheet.getRange("B"+(setRow)).setValue(columnBValue);
      } else {
        sheet.getRange("B"+(setRow)).setValue(columnBValue);
      }

      var deductionV = 0;

      var pos0_0 = "C" + (setRow);
      var pos0_1 = "D" + (setRow);
      var pos0_2 = "E" + (setRow);
      var pos0_3 = "F" + (setRow);
      var pos0_4 = "G" + (setRow);

      var pos1_0 = "H" + (setRow);
      var pos1_1 = "I" + (setRow);
      var pos1_2 = "J" + (setRow);
      var pos1_3 = "K" + (setRow);
      var pos1_4 = "L" + (setRow);

      var pos2_0 = "M" + (setRow);
      var pos2_1 = "N" + (setRow);
      var pos2_2 = "O" + (setRow);
      var pos2_3 = "P" + (setRow);
      var pos2_4 = "Q" + (setRow);

      var pos3_0 = "R" + (setRow);
      var pos3_1 = "S" + (setRow);
      var pos3_2 = "T" + (setRow);
      var pos3_3 = "U" + (setRow);
      var pos3_4 = "V" + (setRow);

      var est1 = (Math.random()*1.5 + 11).toFixed(4);        
      deductionV = deductionV + result[0] * est1 / 100;      

      var est2 = (Math.random()*1.5 + 11).toFixed(4);        
      deductionV = deductionV + result[1] * est2 / 100;

      var est3 = (Math.random()*1.5 + 11).toFixed(4);         
      deductionV = deductionV + result[2] * est3 / 100;

      var est4 = (Math.random()*1.5 + 11).toFixed(4);        
      deductionV = deductionV + result[3] * est4 / 100;

      var divColumns = parseInt(deductionV / 750) + 1;
      
      if (divColumns != multi_number){        
        // SpreadsheetApp.getUi().alert(multi_number);        
        continue;
      } else {      
      
        sheet.getRange(pos0_0).setValue(result[0]);
        sheet.getRange(pos0_1).setValue(est1.toString() + "%");
        sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
        sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
        sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5);

        sheet.getRange(pos1_0).setValue(result[1]);      
        sheet.getRange(pos1_1).setValue(est2.toString() + "%");
        sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
        sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
        sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 
        
        sheet.getRange(pos2_0).setValue(result[2]);      
        sheet.getRange(pos2_1).setValue(est3.toString() + "%");
        sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
        sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
        sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

        sheet.getRange(pos3_0).setValue(result[3]);      
        sheet.getRange(pos3_1).setValue(est4.toString() + "%");
        sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
        sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
        sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
        

        sheet.getRange("W"+(setRow)).setValue(newIndex);

        var subresult = [];
        for (var i = 0; i<result.length; i++){
          subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
        }

        if ( targetRowValue == 8000 ){
          for (var i = 0; i < subresult.length; i++){
            if (+subresult[i] > 200){
              subresult[i] = '200';
            }
          }
        }
        
        var sum = 0;
        var count = 0;
        for (var i = 0; i < subresult.length; i++){
          if (subresult[i] != 0){
            count++;
          }
          sum = sum + +subresult[i];
        }

        for (var i = 0; i < result.length; i++){
          if ( result[i] == 0 ){
            subresult[i] = '';
          }
        }

        sheet.getRange("X"+(setRow)).setValue(subresult[0]);
        sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
        sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
        sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
        sheet.getRange("AB"+(setRow)).setValue(sum);
        sheet.getRange("AC"+(setRow)).setValue(count);
        
        if (selectedMethod == 0  || selectedMethod == 1){
          var recal = targetvalue1;
        } else if (selectedMethod == 2 || selectedMethod == 3){
          var recal = columnBValue;
        }

        sheet.getRange("AD"+(setRow)).setValue(recal);
        break;
      }
      
    }    
  }
}
function getResult(method, col){  

  switch (col){

      case 0:
        result = parseFloat((method * (0.4 + Math.random() * 0.35)).toFixed(2));
        break;
      case 1:
        result = parseFloat((method * (0.75 + Math.random() * 0.25)).toFixed(2));
        break;
      case 2:
        result = parseFloat((method * (1 + Math.random() * 0.25)).toFixed(2));
        break;
      case 3:
        result = parseFloat((method * (1.25 + Math.random() * 0.5)).toFixed(2));
        break;
    }
 
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}

/////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////

function onEdit(e){

  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('Sheet1');

  const range = e.range;
  var setColumn = range.getColumn();  
  var setRow = range.getRow();
  var dvd1 = dvd2 = 0;
  var compResult = [];
   
  if(setColumn == 2 && setRow != 1){    
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow,1).getValue();

    if (columnBValue <= 200) {
      columnBValue = 200;
    }
    
    if (option == "£12,571 to £50,270") {
      var targetRowValue = 8000;
      var targetColumnValue = 5200;
    }     
    else if ( option == "Less than £12,570") {         
      var targetRowValue = 8000;
      var targetColumnValue = 5200;  
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if ( targetRowValue == 8000){
      if (columnBValue < 2000){
        dvd1 = 1;
        var targetvalue1  = columnBValue * 10;
      } else if (columnBValue >= 2000){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    } else if (option == "Less than £12,570"){
      if ( targetRowValue == 8000){
        if (columnBValue < 2000){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 2000){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10000){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10000){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }
   
    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++) {
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;
      }
    }    

    var dd2 = Number.POSITIVE_INFINITY;
    
    for (var l =1; l <= 4; l++){
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }    

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,570" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,570" ){
      var method4 = columnBValue;   
    }    

    var arr = [0, 1, 2, 3];
    var variations = ['-5~-15%', '-5~0%', '0~5%', '5~15%'];
    // var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 

    var dvd_sum = 0;
    var multi_number = 0;

    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }  

    for (var selectedMethod = 0; selectedMethod < 4; selectedMethod++){

      var result = [];
      var newIndex = [];

      switch (selectedMethod) {
        case 0:    
          multi_number = dv1;        
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              var v= getResult(method1, selRule[0])             
              result.push(v);
              result.push(targetvalue1 - v);
              result.push(0);
              result.push(0);
              break;
            case 3:
              for (var k = 0; k<3; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum);         
                var re = getResult(method1, selRule[k]);           
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                      
              }
              result.push('0');
              break;
            case 4:
              for (var k = 0; k<4; k++){                                  
                var diff1 = Math.abs(targetRowValue - dvd_sum); 
                var re = getResult(method1, selRule[k]);                   
                dvd_sum = dvd_sum + re;
                var diff2 = Math.abs(targetRowValue-dvd_sum);
                
                if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(targetvalue1 - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                   
              }
              break;
          }
          break;
        case 1:  
          multi_number = 4;
          if (dvd2 == 1){
            for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method2, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                result.push(re);
              }else{
                result.push('0');
              }
            }                   
          } else if (dvd1 == 1) {
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);            
          }    
          break;
        case 2:          
          multi_number = dv2;
          switch(dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              var re = getResult(method3, selRule[0])
              result.push(re);
              result.push(columnBValue - re);
              result.push(0);
              result.push(0);                
              break;
            case 3:
              for (var k = 0; k<3; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum); 
              var re = getResult(method3, selRule[k]);                   
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);                  
              if (diff1 > diff2){
                  if(k < 2 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                         
              }
              result.push('0');
              break;
            case 4:
              for (var k = 0; k<4; k++){                                  
              var diff1 = Math.abs(targetRowValue - dvd_sum);                    
              var re = getResult(method3, selRule[k]);                                                                                                               
              dvd_sum = dvd_sum + re;
              var diff2 = Math.abs(targetRowValue-dvd_sum);
              
              if (diff1 > diff2){
                  if(k < 3 ){
                    result.push(re);
                  } else {
                    result.push(columnBValue - dvd_sum + re);
                  }                  
                } else {                  
                  result.push(0);                
                }                        
              }
              break;
          }
          break;
        case 3:      
          multi_number = 4;
          for (var k=0; k<4; k++){
          result.push(getResult(method4, selRule[k]));
          }
          break;          
      }

      for (var i =0; i<result.length; i++){
        compResult[i] = result[i];
      }      
        
      var countZero = 0;      

      for (var i=0; i<result.length; i++){
        if(result[i] == 0){       
          countZero++;
        }
      }
    
      if (countZero == 0){
        result = shuffle(result);
      } else if (countZero == 1) {
        while (result[0] != 0){
          result = shuffle(result);
        }
      } else if (countZero == 2 || countZero == 3){      
        while ((result[0] != 0) || (result[3] != 0)){
          result = shuffle(result);
        }
      }

      for (var i=0; i<result.length; i++){
        for (var j = 0; j<compResult.length; j++){
          if(result[i] == compResult[j]){
            newIndex.push(variations[j]);          
            compResult[j] = 1000000;
            break;
          }
        }
      }
    
      for (var i = 0; i < result.length; i++){
        if ( result[i] == 0 ){
          result[i] = '';
        }
      }
      
      newIndex = newIndex.toString();      

      if ((selectedMethod == 1 && dvd1 == 1) || selectedMethod == 3){
        sheet.getRange("B"+(setRow)).setValue(columnBValue);
      } else {
        sheet.getRange("B"+(setRow)).setValue(columnBValue);
      }

      var deductionV = 0;

      var pos0_0 = "C" + (setRow);
      var pos0_1 = "D" + (setRow);
      var pos0_2 = "E" + (setRow);
      var pos0_3 = "F" + (setRow);
      var pos0_4 = "G" + (setRow);

      var pos1_0 = "H" + (setRow);
      var pos1_1 = "I" + (setRow);
      var pos1_2 = "J" + (setRow);
      var pos1_3 = "K" + (setRow);
      var pos1_4 = "L" + (setRow);

      var pos2_0 = "M" + (setRow);
      var pos2_1 = "N" + (setRow);
      var pos2_2 = "O" + (setRow);
      var pos2_3 = "P" + (setRow);
      var pos2_4 = "Q" + (setRow);

      var pos3_0 = "R" + (setRow);
      var pos3_1 = "S" + (setRow);
      var pos3_2 = "T" + (setRow);
      var pos3_3 = "U" + (setRow);
      var pos3_4 = "V" + (setRow);

      var est1 = (Math.random()*1.5 + 11).toFixed(4);        
      deductionV = deductionV + result[0] * est1 / 100;      

      var est2 = (Math.random()*1.5 + 11).toFixed(4);        
      deductionV = deductionV + result[1] * est2 / 100;

      var est3 = (Math.random()*1.5 + 11).toFixed(4);         
      deductionV = deductionV + result[2] * est3 / 100;

      var est4 = (Math.random()*1.5 + 11).toFixed(4);        
      deductionV = deductionV + result[3] * est4 / 100;

      var divColumns = parseInt(deductionV / 750) + 1;
      
      if (divColumns != multi_number){        
        // SpreadsheetApp.getUi().alert( deductionV + ":" + multi_number + ":" + divColumns);        
        continue;
      } else {      
      
        sheet.getRange(pos0_0).setValue(result[0]);
        sheet.getRange(pos0_1).setValue(est1.toString() + "%");
        sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
        sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
        sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5);

        sheet.getRange(pos1_0).setValue(result[1]);      
        sheet.getRange(pos1_1).setValue(est2.toString() + "%");
        sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
        sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
        sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 
        
        sheet.getRange(pos2_0).setValue(result[2]);      
        sheet.getRange(pos2_1).setValue(est3.toString() + "%");
        sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
        sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
        sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

        sheet.getRange(pos3_0).setValue(result[3]);      
        sheet.getRange(pos3_1).setValue(est4.toString() + "%");
        sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
        sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
        sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
        

        sheet.getRange("W"+(setRow)).setValue(newIndex);

        var subresult = [];
        for (var i = 0; i<result.length; i++){
          subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
        }

        if ( targetRowValue == 8000 ){
          for (var i = 0; i < subresult.length; i++){
            if (+subresult[i] > 200){
              subresult[i] = '200';
            }
          }
        }
        
        var sum = 0;
        var count = 0;
        for (var i = 0; i < subresult.length; i++){
          if (subresult[i] != 0){
            count++;
          }
          sum = sum + +subresult[i];
        }

        for (var i = 0; i < result.length; i++){
          if ( result[i] == 0 ){
            subresult[i] = '';
          }
        }

        sheet.getRange("X"+(setRow)).setValue(subresult[0]);
        sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
        sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
        sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
        sheet.getRange("AB"+(setRow)).setValue(sum);
        sheet.getRange("AC"+(setRow)).setValue(count);
        
        if (selectedMethod == 0  || selectedMethod == 1){
          var recal = targetvalue1;
        } else if (selectedMethod == 2 || selectedMethod == 3){
          var recal = columnBValue;
        }

        sheet.getRange("AD"+(setRow)).setValue(recal);
        break;
      }
      
    }    
  }
}
function getResult(method, col){  

  switch (col){

      case 0:
        result = parseFloat((method * (0.85 + Math.random() * 0.1)).toFixed(2));
        break;
      case 1:
        result = parseFloat((method * (0.95 + Math.random() * 0.05)).toFixed(2));
        break;
      case 2:
        result = parseFloat((method * (1 + Math.random() * 0.05)).toFixed(2));
        break;
      case 3:
        result = parseFloat((method * (1.1 + Math.random() * 0.05)).toFixed(2));
        break;
    }
 
  return result;

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}


////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////


function onEdit(e){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  const range = e.range;
  var setColumn = range.getColumn();
  var setRow = range.getRow();
  var dvd1 = 0;
  var dvd2 = 0;

  if (setColumn == 2 && setRow != 1){
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow, 1).getValue();

    if (columnBValue <= 200){
      columnBValue = 200;
    }

    if (option == "£12,571 to £50,270"){
      var targetRowValue = 8000;
      var targetColumnValue = 6000;
    } else if (option == "Less than £12,570"){
      if ( columnBValue <= 8000){
        targetRowValue = 8000;
        targetColumnValue = 6000;
      } else {
        targetRowValue = 40000;
        targetColumnValue = 10000;
      }
    }

    if (targetRowValue == 8000){
      if (columnBValue < 3500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 3500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    }else if (option == "Less than £12,500"){
      if ( targetRowValue == 8000){
        if (columnBValue < 3500){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 3500){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }

    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++) {
      var deductionBasic = parseInt(targetvalue1 / 6000) + 1;
      if(l < deductionBasic){
        continue;
      }
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;        
      }
    }    
    
    var dd2 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++){
      var deductionBasic = parseInt(columnBValue / 6000) + 1;
      if(l < deductionBasic){
        continue;
      }
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }    

    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,500" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,500" ){
      var method4 = columnBValue;   
    }
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    
    // for (var j = 0; j < calculatedValues.length; j++) {
    //   if(j == 0){
    //     var multiNum = dv1;
    //   } else if(j == 1 || j == 3){
    //     var multiNum = 4;
    //   } else if(j == 2 ){
    //     var multiNum = dv2;
    //   }
    //   var calculatedValue = calculatedValues[j];
    //   var difference = Math.abs(targetRowValue - calculatedValue * multiNum);      
    //   if (difference < closestDifference) {
    //     closestMethod = j;
    //     closestDifference = difference;
    //   }
    // }

    for (var j = 0; j < calculatedValues.length; j++){
      var calculatedValue = calculatedValues[j];
      var difference = Math.abs(7000 - calculatedValue);

      if (difference < closestDifference){
        closestMethod = j;
        closestDifference = difference;
      }
    }

    var result = [];    
    
//  SpreadsheetApp.getUi().alert(closestMethod);
//  SpreadsheetApp.getUi().alert(dv1);

    switch (closestMethod) {
      case 0:
        switch (dv1){
          case 1:
            result.push(method1);
            result.push(0);
            result.push(0);
            result.push(0);
            break;
          case 2:
            result.push(method1);
            result.push(method1);
            result.push(0);
            result.push(0);
            break;
          case 3: 
            result.push(method1);
            result.push(method1);
            result.push(method1);
            result.push(0);
            break;
          case 4:
            result.push(method1);
            result.push(method1);
            result.push(method1);
            result.push(method1);
            break;
        }
        break;
      case 1:
        if (dvd1 == 1){
          result.push(method2);
          result.push(0);
          result.push(0);
          result.push(0);
        } else if (dvd2 == 1){
          result.push(method2);
          result.push(method2);
          result.push(method2);
          result.push(method2);
        }
        break;
      case 2:
        switch (dv2){
          case 1:
            result.push(method3);
            result.push(0);
            result.push(0);
            result.push(0);
            break;
          case 2:
            result.push(method3);
            result.push(method3);
            result.push(0);
            result.push(0);
            break;
          case 3:
            result.push(method3);
            result.push(method3);
            result.push(method3);
            result.push(0);
            break;
          case 4:
            result.push(method3);
            result.push(method3);
            result.push(method3);
            result.push(method3);
            break;
        }
        break;
      case 3:
        result.push(method4);
        result.push(method4);
        result.push(method4);
        result.push(method4);
        break;
    }   

    

    // result = permutation(result, 4);

    var countZero = 0;

    for (var i = 0; i < result.length; i++){
      if(result[i] == 0){
        countZero++;
      }
    }

    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2 || countZero == 3){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }   
   
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }    
    // SpreadsheetApp.getUi().alert(result[0]);
    
    var pos0_0 = "C" + (setRow);
    var pos0_1 = "D" + (setRow);
    var pos0_2 = "E" + (setRow);
    var pos0_3 = "F" + (setRow);
    var pos0_4 = "G" + (setRow);

    sheet.getRange(pos0_0).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos0_1).setValue(est1.toString() + "%");   
    sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
    sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
    sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5); 

    var pos1_0 = "H" + (setRow);
    var pos1_1 = "I" + (setRow);
    var pos1_2 = "J" + (setRow);
    var pos1_3 = "K" + (setRow);
    var pos1_4 = "L" + (setRow);

    sheet.getRange(pos1_0).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos1_1).setValue(est2.toString() + "%");
    sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
    sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
    sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 

    var pos2_0 = "M" + (setRow);
    var pos2_1 = "N" + (setRow);
    var pos2_2 = "O" + (setRow);
    var pos2_3 = "P" + (setRow);
    var pos2_4 = "Q" + (setRow);

    sheet.getRange(pos2_0).setValue(result[2]);
    var est3 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos2_1).setValue(est3.toString() + "%");
    sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
    sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
    sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

    var pos3_0 = "R" + (setRow);
    var pos3_1 = "S" + (setRow);
    var pos3_2 = "T" + (setRow);
    var pos3_3 = "U" + (setRow);
    var pos3_4 = "V" + (setRow);

    sheet.getRange(pos3_0).setValue(result[3]);
    var est4 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos3_1).setValue(est4.toString() + "%");
    sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
    sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
    sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
      
   
    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("X"+(setRow)).setValue(subresult[0]);
    sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
    sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
    sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
    sheet.getRange("AB"+(setRow)).setValue(sum);
    sheet.getRange("AC"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("AD"+(setRow)).setValue(recal);
  }

}

function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}



///////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////

function onEdit(e){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  const range = e.range;
  var setColumn = range.getColumn();
  var setRow = range.getRow();
  var dvd1 = 0;
  var dvd2 = 0;
  var compResult = [];

  if (setColumn == 2 && setRow != 1){
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow, 1).getValue();

    if (columnBValue <= 200){
      columnBValue = 200;
    }

    if (option == "£12,571 to £50,270"){
      var targetRowValue = 8000;
      var targetColumnValue = 6000;
    } else if (option == "Less than £12,570"){
      if ( columnBValue <= 8000){
        targetRowValue = 8000;
        targetColumnValue = 6000;
      } else {
        targetRowValue = 40000;
        targetColumnValue = 10000;
      }
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if (targetRowValue == 8000){
      if (columnBValue < 3500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 3500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    }else if (option == "Less than £12,500"){
      if ( targetRowValue == 8000){
        if (columnBValue < 3500){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 3500){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      } else if (targetRowValue == 40000){
        if (columnBValue < 10011){
          dvd1 = 1;
          var targetvalue1 = columnBValue * 10;
        } else if (columnBValue >= 10011){
          dvd2 = 1;
          var targetvalue1 = columnBValue / 10;
        }
      }      
    }

    var dd1 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++) {
      var deductionBasic = parseInt(targetvalue1 / 6000) + 1;
      if(l < deductionBasic){
        continue;
      }
      var d_target = Math.abs(targetvalue1/l-targetColumnValue);
      if (d_target <= dd1 ){
        var dv1 = l;
        dd1 = d_target;        
      }
    }    
    
    var dd2 = Number.POSITIVE_INFINITY;

    for (var l = 1; l <= 4; l++){
      var deductionBasic = parseInt(columnBValue / 6000) + 1;
      if(l < deductionBasic){
        continue;
      }
      var d_target = Math.abs(columnBValue/l - targetColumnValue);
      if(d_target <= dd2){
        var dv2 = l;
        dd2 = d_target;
      }
    }    

    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,500" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,500" ){
      var method4 = columnBValue;   
    }
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    
    // for (var j = 0; j < calculatedValues.length; j++) {
    //   if(j == 0){
    //     var multiNum = dv1;
    //   } else if(j == 1 || j == 3){
    //     var multiNum = 4;
    //   } else if(j == 2 ){
    //     var multiNum = dv2;
    //   }
    //   var calculatedValue = calculatedValues[j];
    //   var difference = Math.abs(targetRowValue - calculatedValue * multiNum);      
    //   if (difference < closestDifference) {
    //     closestMethod = j;
    //     closestDifference = difference;
    //   }
    // }

    for (var j = 0; j < calculatedValues.length; j++){
      var calculatedValue = calculatedValues[j];
      var difference = Math.abs(7000 - calculatedValue);

      if (difference < closestDifference){
        closestMethod = j;
        closestDifference = difference;
      }
    }

    var arr = [0, 1, 2, 3];
    // var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];
    var variations = ['-10~-20%', '-10~0%', '0~10%', '10~20%'];

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
    var dvd_sum = 0;
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }
    
//  SpreadsheetApp.getUi().alert(closestMethod);
//  SpreadsheetApp.getUi().alert(dv1);

    switch (closestMethod) {
      case 0:
        switch (dv1){
          case 1:
            result.push(method1);
            result.push(0);
            result.push(0);
            result.push(0);
            break;
          case 2:
            result.push(getResult(method1, selRule[0]));
            result.push(targetvalue1 - getResult(method1, selRule[0]));
            result.push(0);
            result.push(0);
            break;
          case 3: 
            result.push(getResult(method1, selRule[0]));
            result.push(getResult(method1, selRule[1]));
            result.push(targetvalue1 - getResult(method1, selRule[0]) - getResult(method1, selRule[1]));
            result.push(0);
            break;
          case 4:
            result.push(getResult(method1, selRule[0]));
            result.push(getResult(method1, selRule[1]));
            result.push(getResult(method1, selRule[2]));
            result.push(targetvalue1 - getResult(method1, selRule[0]) - getResult(method1, selRule[1]) - getResult(method1, selRule[2]));
            break;
        }
        break;
      case 1:
        if (dvd1 == 1){
          result.push(method2);
          result.push(0);
          result.push(0);
          result.push(0);
        } else if (dvd2 == 1){
          result.push(getResult(method2, selRule[0]));
          result.push(getResult(method2, selRule[1]));
          result.push(getResult(method2, selRule[2]));
          result.push(targetvalue1 - getResult(method2, selRule[0]) - getResult(method2, selRule[1]) - getResult(method2, selRule[2]));
        }
        break;
      case 2:
        switch (dv2){
          case 1:
            result.push(method3);
            result.push(0);
            result.push(0);
            result.push(0);
            break;
          case 2:
            result.push(getResult(method3, selRule[0]));
            result.push(columnBValue - getResult(method3, selRule[0]));
            result.push(0);
            result.push(0);
            break;
          case 3:
            result.push(getResult(method3, selRule[0]));
            result.push(getResult(method3, selRule[1]));
            result.push(columnBValue - getResult(method3, selRule[0]) - getResult(method3, selRule[1]));
            result.push(0);
            break;
          case 4:
            result.push(getResult(method3, selRule[0]));
            result.push(getResult(method3, selRule[1]));
            result.push(getResult(method3, selRule[2]));
            result.push(columnBValue - getResult(method3, selRule[0]) - getResult(method3, selRule[1]) - getResult(method3, selRule[2]));
            break;
        }
        break;
      case 3:
        result.push(getResult(method4, selRule[0]));
        result.push(getResult(method4, selRule[0]));
        result.push(getResult(method4, selRule[0]));
        result.push(getResult(method4, selRule[0]));
        break;
    }   

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
    
    var countZero = 0;

    for (var i = 0; i < result.length; i++){
      if(result[i] == 0){
        countZero++;
      }
    }

    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2 || countZero == 3){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }   

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
       
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }    

    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    // SpreadsheetApp.getUi().alert(result[0]);
    
    var pos0_0 = "C" + (setRow);
    var pos0_1 = "D" + (setRow);
    var pos0_2 = "E" + (setRow);
    var pos0_3 = "F" + (setRow);
    var pos0_4 = "G" + (setRow);

    sheet.getRange(pos0_0).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos0_1).setValue(est1.toString() + "%");   
    sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
    sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
    sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5); 

    var pos1_0 = "H" + (setRow);
    var pos1_1 = "I" + (setRow);
    var pos1_2 = "J" + (setRow);
    var pos1_3 = "K" + (setRow);
    var pos1_4 = "L" + (setRow);

    sheet.getRange(pos1_0).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos1_1).setValue(est2.toString() + "%");
    sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
    sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
    sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 

    var pos2_0 = "M" + (setRow);
    var pos2_1 = "N" + (setRow);
    var pos2_2 = "O" + (setRow);
    var pos2_3 = "P" + (setRow);
    var pos2_4 = "Q" + (setRow);

    sheet.getRange(pos2_0).setValue(result[2]);
    var est3 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos2_1).setValue(est3.toString() + "%");
    sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
    sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
    sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

    var pos3_0 = "R" + (setRow);
    var pos3_1 = "S" + (setRow);
    var pos3_2 = "T" + (setRow);
    var pos3_3 = "U" + (setRow);
    var pos3_4 = "V" + (setRow);

    sheet.getRange(pos3_0).setValue(result[3]);
    var est4 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos3_1).setValue(est4.toString() + "%");
    sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
    sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
    sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
      
    sheet.getRange("W"+(setRow)).setValue(newIndex);
   
    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("X"+(setRow)).setValue(subresult[0]);
    sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
    sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
    sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
    sheet.getRange("AB"+(setRow)).setValue(sum);
    sheet.getRange("AC"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("AD"+(setRow)).setValue(recal);
  }

}

function getResult(method, col){  

  switch (col){

      case 0:
        result = parseFloat((method * (0.8 + Math.random() * 0.1)).toFixed(2));
        break;
      case 1:
        result = parseFloat((method * (0.9 + Math.random() * 0.1)).toFixed(2));
        break;
      case 2:
        result = parseFloat((method * (1 + Math.random() * 0.1)).toFixed(2));
        break;
      case 3:
        result = parseFloat((method * (1.1 + Math.random() * 0.1)).toFixed(2));
        break;
    }
 
  return result;

}


function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}





////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////

function onEdit(e){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  const range = e.range;
  var setColumn = range.getColumn();
  var setRow = range.getRow();
  var dvd1 = 0;
  var dvd2 = 0;
  var compResult = [];

  if (setColumn == 2 && setRow != 1){
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow, 1).getValue();

    if (columnBValue <= 200){
      columnBValue = 200;
    }

    if (option == "£12,571 to £50,270"){
      var targetRowValue = 8000;
      var targetColumnValue = 6000;     
    } else if (option == "Less than £12,570"){      
        targetRowValue = 40000;      
        targetColumnValue = 12000;     
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if (option == "£12,571 to £50,270"){
      if (columnBValue < 3500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 3500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    }else if (option == "Less than £12,570"){
        
      if (columnBValue < 4800){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 4800){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }   
    }

    var dd1 = Number.POSITIVE_INFINITY;
    var dd2 = Number.POSITIVE_INFINITY;

    if ( option == "£12,571 to £50,270" ){
      for (var l = 1; l <= 4; l++) {
        var deductionBasic = parseInt(targetvalue1 / 6000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(targetvalue1/l-targetColumnValue);
        if (d_target <= dd1 ){
          var dv1 = l;
          dd1 = d_target;        
        }
      }     

      for (var l = 1; l <= 4; l++){
        var deductionBasic = parseInt(columnBValue / 6000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(columnBValue/l - targetColumnValue);
        if(d_target <= dd2){
          var dv2 = l;
          dd2 = d_target;
        }
      }  
    } else if (option == "Less than £12,570"){
      
      for (var l = 1; l <= 4; l++) {
        var deductionBasic = parseInt(targetvalue1 / 12000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(targetvalue1/l-targetColumnValue);
        if (d_target <= dd1 ){
          var dv1 = l;
          dd1 = d_target;        
        }
      }     

      for (var l = 1; l <= 4; l++){
        var deductionBasic = parseInt(columnBValue / 12000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(columnBValue/l - targetColumnValue);
        if(d_target <= dd2){
          var dv2 = l;
          dd2 = d_target;
        }
      }  
    }
      

    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;      
    if ( option == "Less than £12,570" ){
      var method4 = 1;
    }  else if ( option != "Less than £12,570" ){
      var method4 = columnBValue;   
    }
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    if (option == "£12,571 to £50,270"){
      for (var j = 0; j < calculatedValues.length; j++){
        var calculatedValue = calculatedValues[j];
        if (calculatedValue >= 6000 ){
          continue;
        }
        var difference = Math.abs(6000 - calculatedValue);

        if (difference < closestDifference){
          closestMethod = j;
          closestDifference = difference;
        }
      }
    } else if (option == "Less than £12,570"){
      // for (var j = 0; j < calculatedValues.length; j++) {
      //   var calculatedValue = calculatedValues[j];
      //   var difference = Math.abs(targetRowValue - calculatedValue * 4);      
      //   if (difference < closestDifference) {
      //     closestMethod = j;
      //     closestDifference = difference;
      //   }
      // }

      for (var j = 0; j < calculatedValues.length; j++){
        var calculatedValue = calculatedValues[j];
        if (calculatedValue >= 12000 ){
          continue;
        }
        var difference = Math.abs(12000 - calculatedValue);

        if (difference < closestDifference){
          closestMethod = j;
          closestDifference = difference;
        }
      }
    }    

    var arr = [0, 1, 2, 3];
    // if (option == "£12,571 to £50,270"){
      var variations = ['10~20%', '0~10%', '-10~0%', '-20~-10%'];
    // } else if (option == "Less than £12,570"){
    //   var variations = ['-25~-60%', '-25~0%', '0~25%', '25~75%'];
    // }
    

    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
    var dvd_sum = 0;
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }

    if (option == "£12,571 to £50,270"){
      // var selectOption = 1;
      switch (closestMethod) {
        case 0:
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(method1, selRule[0]));
              result.push(targetvalue1 - getResult(method1, selRule[0]));
              result.push(0);
              result.push(0);
              break;
            case 3: 
              result.push(getResult(method1, selRule[0]));
              result.push(getResult(method1, selRule[1]));
              result.push(targetvalue1 - getResult(method1, selRule[0]) - getResult(method1, selRule[1]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(method1, selRule[0]));
              result.push(getResult(method1, selRule[1]));
              result.push(getResult(method1, selRule[2]));
              result.push(targetvalue1 - getResult(method1, selRule[0]) - getResult(method1, selRule[1]) - getResult(method1, selRule[2]));
              break;
          }
          break;
        case 1:
          if (dvd1 == 1){
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);
          } else if (dvd2 == 1){
            result.push(getResult(method2, selRule[0]));
            result.push(getResult(method2, selRule[1]));
            result.push(getResult(method2, selRule[2]));
            result.push(targetvalue1 - getResult(method2, selRule[0]) - getResult(method2, selRule[1]) - getResult(method2, selRule[2]));
          }
          break;
        case 2:
          switch (dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(method3, selRule[0]));
              result.push(columnBValue - getResult(method3, selRule[0]));
              result.push(0);
              result.push(0);
              break;
            case 3:
              result.push(getResult(method3, selRule[0]));
              result.push(getResult(method3, selRule[1]));
              result.push(columnBValue - getResult(method3, selRule[0]) - getResult(method3, selRule[1]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(method3, selRule[0]));
              result.push(getResult(method3, selRule[1]));
              result.push(getResult(method3, selRule[2]));
              result.push(columnBValue - getResult(method3, selRule[0]) - getResult(method3, selRule[1]) - getResult(method3, selRule[2]));
              break;
          }
          break;
        case 3:
          result.push(getResult(method4, selRule[0]));
          result.push(getResult(method4, selRule[0]));
          result.push(getResult(method4, selRule[0]));
          result.push(getResult(method4, selRule[0]));
          break;
      } 
    } else if (option == "Less than £12,570"){
      // var selectOption = 2;
      switch (closestMethod) {
        // case 0:            
        //   switch (dv1){          
        //     case 1:              
        //       if (dvd2 == 1){                 
        //         for (var k = 0; k<4; k++){                                  
        //           var diff1 = Math.abs(targetRowValue - dvd_sum);      
        //           var re = getResult(method1, selRule[k]);              
        //           dvd_sum = dvd_sum + re;
        //           var diff2 = Math.abs(targetRowValue-dvd_sum);                    
        //           if (diff1 > diff2){
        //             if(k < 3 ){
        //               result.push(re);
        //             } else {
        //               result.push(targetvalue1 - dvd_sum + re);
        //             }                  
        //           } else {                  
        //             result.push(0);                
        //           }                   
        //         }
                
        //       } else if (dvd1 == 1) {
        //         result.push(method1);
        //         result.push(0);
        //         result.push(0);
        //         result.push(0);
        //       }
        //       break;
        //     case 2:    
        //       var v= getResult(method1, selRule[0])             
        //       result.push(v);
        //       result.push(targetvalue1 - v);
        //       result.push(0);
        //       result.push(0);
        //       break;
        //     case 3:      
        //       for (var k = 0; k<3; k++){                                  
        //         var diff1 = Math.abs(targetRowValue - dvd_sum);         
        //         var re = getResult(method1, selRule[k]);           
        //         dvd_sum = dvd_sum + re;
        //         var diff2 = Math.abs(targetRowValue-dvd_sum);
                
        //         if (diff1 > diff2){
        //             if(k < 2 ){
        //               result.push(re);
        //             } else {
        //               result.push(targetvalue1 - dvd_sum + re);
        //             }                  
        //           } else {                  
        //             result.push(0);                
        //           }                      
        //       }
        //       result.push('0');
        //       break;
        //     case 4:   
        //       for (var k = 0; k<4; k++){                                  
        //           var diff1 = Math.abs(targetRowValue - dvd_sum); 
        //           var re = getResult(method1, selRule[k]);                   
        //           dvd_sum = dvd_sum + re;
        //           var diff2 = Math.abs(targetRowValue-dvd_sum);
                  
        //           if (diff1 > diff2){
        //             if(k < 3 ){
        //               result.push(re);
        //             } else {
        //               result.push(targetvalue1 - dvd_sum + re);
        //             }                  
        //           } else {                  
        //             result.push(0);                
        //           }                   
        //         }
        //       break;
        //   }
        //   break;
        // case 1:  
        //   if (dvd2 == 1){
        //       for (var k = 0; k<4; k++){                                  
        //         var diff1 = Math.abs(targetRowValue - dvd_sum); 
        //         var re = getResult(method2, selRule[k]);                   
        //         dvd_sum = dvd_sum + re;
        //         var diff2 = Math.abs(targetRowValue-dvd_sum);
                
        //         if (diff1 > diff2){
        //           result.push(re);
        //         }else{
        //           result.push('0');
        //         }
        //       }                   
        //     } else if (dvd1 == 1) {
        //       result.push(method2);
        //       result.push(0);
        //       result.push(0);
        //       result.push(0);            
        //     }       
        //   break;
        // case 2:          
        //   switch (dv2){              
        //     case 2:
        //       var re = getResult(method3, selRule[0])
        //       result.push(re);
        //       result.push(columnBValue - re);
        //       result.push(0);
        //       result.push(0);                
        //       break;
        //     case 3:
            
        //       for (var k = 0; k<3; k++){                                  
        //         var diff1 = Math.abs(targetRowValue - dvd_sum); 
        //         var re = getResult(method3, selRule[k]);                   
        //         dvd_sum = dvd_sum + re;
        //         var diff2 = Math.abs(targetRowValue-dvd_sum);                  
        //         if (diff1 > diff2){
        //             if(k < 2 ){
        //               result.push(re);
        //             } else {
        //               result.push(columnBValue - dvd_sum + re);
        //             }                  
        //           } else {                  
        //             result.push(0);                
        //           }                         
        //       }
        //       result.push('0');
        //       break;
        //     case 4:     
        //       for (var k = 0; k<4; k++){                                  
        //         var diff1 = Math.abs(targetRowValue - dvd_sum);                    
        //         var re = getResult(method3, selRule[k]);                                                                                                               
        //         dvd_sum = dvd_sum + re;
        //         var diff2 = Math.abs(targetRowValue-dvd_sum);
                
        //         if (diff1 > diff2){
        //             if(k < 3 ){
        //               result.push(re);
        //             } else {
        //               result.push(columnBValue - dvd_sum + re);
        //             }                  
        //           } else {                  
        //             result.push(0);                
        //           }                        
        //       }
        //       break;
        //   }        
        //   break;
        // case 3:      
        //   for (var k=0; k<4; k++){
        //     result.push(getResult(method4, selRule[k]));
        //   }
        //   break;
        case 0:
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(method1, selRule[0]));
              result.push(targetvalue1 - getResult(method1, selRule[0]));
              result.push(0);
              result.push(0);
              break;
            case 3: 
              result.push(getResult(method1, selRule[0]));
              result.push(getResult(method1, selRule[1]));
              result.push(targetvalue1 - getResult(method1, selRule[0]) - getResult(method1, selRule[1]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(method1, selRule[0]));
              result.push(getResult(method1, selRule[1]));
              result.push(getResult(method1, selRule[2]));
              result.push(targetvalue1 - getResult(method1, selRule[0]) - getResult(method1, selRule[1]) - getResult(method1, selRule[2]));
              break;
          }
          break;
        case 1:
          if (dvd1 == 1){
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);
          } else if (dvd2 == 1){
            result.push(getResult(method2, selRule[0]));
            result.push(getResult(method2, selRule[1]));
            result.push(getResult(method2, selRule[2]));
            result.push(targetvalue1 - getResult(method2, selRule[0]) - getResult(method2, selRule[1]) - getResult(method2, selRule[2]));
          }
          break;
        case 2:
          switch (dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(method3, selRule[0]));
              result.push(columnBValue - getResult(method3, selRule[0]));
              result.push(0);
              result.push(0);
              break;
            case 3:
              result.push(getResult(method3, selRule[0]));
              result.push(getResult(method3, selRule[1]));
              result.push(columnBValue - getResult(method3, selRule[0]) - getResult(method3, selRule[1]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(method3, selRule[0]));
              result.push(getResult(method3, selRule[1]));
              result.push(getResult(method3, selRule[2]));
              result.push(columnBValue - getResult(method3, selRule[0]) - getResult(method3, selRule[1]) - getResult(method3, selRule[2]));
              break;
          }
          break;
        case 3:
          result.push(getResult(method4, selRule[0]));
          result.push(getResult(method4, selRule[0]));
          result.push(getResult(method4, selRule[0]));
          result.push(getResult(method4, selRule[0]));
          break;
      }
    }

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
    
    var countZero = 0;

    for (var i = 0; i < result.length; i++){
      if(result[i] == 0){
        countZero++;
      }
    }

    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2 || countZero == 3){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }   

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
       
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }    

    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    // SpreadsheetApp.getUi().alert(result[0]);
    
    var pos0_0 = "C" + (setRow);
    var pos0_1 = "D" + (setRow);
    var pos0_2 = "E" + (setRow);
    var pos0_3 = "F" + (setRow);
    var pos0_4 = "G" + (setRow);

    sheet.getRange(pos0_0).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos0_1).setValue(est1.toString() + "%");   
    sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
    sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
    sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5); 

    var pos1_0 = "H" + (setRow);
    var pos1_1 = "I" + (setRow);
    var pos1_2 = "J" + (setRow);
    var pos1_3 = "K" + (setRow);
    var pos1_4 = "L" + (setRow);

    sheet.getRange(pos1_0).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos1_1).setValue(est2.toString() + "%");
    sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
    sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
    sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 

    var pos2_0 = "M" + (setRow);
    var pos2_1 = "N" + (setRow);
    var pos2_2 = "O" + (setRow);
    var pos2_3 = "P" + (setRow);
    var pos2_4 = "Q" + (setRow);

    sheet.getRange(pos2_0).setValue(result[2]);
    var est3 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos2_1).setValue(est3.toString() + "%");
    sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
    sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
    sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

    var pos3_0 = "R" + (setRow);
    var pos3_1 = "S" + (setRow);
    var pos3_2 = "T" + (setRow);
    var pos3_3 = "U" + (setRow);
    var pos3_4 = "V" + (setRow);

    sheet.getRange(pos3_0).setValue(result[3]);
    var est4 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos3_1).setValue(est4.toString() + "%");
    sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
    sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
    sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
      
    sheet.getRange("W"+(setRow)).setValue(newIndex);
   
    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("X"+(setRow)).setValue(subresult[0]);
    sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
    sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
    sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
    sheet.getRange("AB"+(setRow)).setValue(sum);
    sheet.getRange("AC"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("AD"+(setRow)).setValue(recal);
  }

}

// function getResult(selectOption, method, col){  
function getResult(method, col){  
  switch (col){
      case 0:   
        // if (selectOption == 1){
          result = parseFloat((method * (1.1 + Math.random() * 0.1)).toFixed(2));
        // } else if (selectOption == 2){
        //   result = parseFloat((method * (0.4 + Math.random() * 0.35)).toFixed(2));
        // }         
        break;
      case 1:
        // if (selectOption == 1){
          result = parseFloat((method * (1 + Math.random() * 0.1)).toFixed(2));   
        // } else if (selectOption == 2){
        //   result = parseFloat((method * (0.75 + Math.random() * 0.25)).toFixed(2));
        // }             
        break;
      case 2:
        // if (selectOption == 1){
          result = parseFloat((method * (0.9 + Math.random() * 0.1)).toFixed(2));
        // } else if (selectOption == 2){
        //   result = parseFloat((method * (1 + Math.random() * 0.25)).toFixed(2));
        // }        
        break;
      case 3:
        // if (selectOption == 1){
          result = parseFloat((method * (0.8 + Math.random() * 0.1)).toFixed(2));
        // } else if (selectOption == 2){
        //   result = parseFloat((method * (1.25 + Math.random() * 0.5)).toFixed(2));
        // }        
        break;
    }
 
  return result;

}


function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}

/////////////////////////////////////////////////////////////////////////////

//////////////////////////  UPDATED ON 7/23/2023  ///////////////////////////

/////////////////////////////////////////////////////////////////////////////

function onEdit(e){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  const range = e.range;
  var setColumn = range.getColumn();
  var setRow = range.getRow();
  var dvd1 = 0;
  var dvd2 = 0;
  var compResult = [];

  if (setColumn == 2 && setRow != 1){
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow, 1).getValue();

    if (columnBValue <= 200){
      columnBValue = 200;
    }

    if (option == "£12,571 to £50,270"){
      var targetRowValue = 8000;
      var targetColumnValue = 6000;     
    } else if (option == "Less than £12,570"){      
        targetRowValue = 40000;      
        targetColumnValue = 12500;     
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if (option == "£12,571 to £50,270"){
      if (columnBValue < 3500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 3500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    }else if (option == "Less than £12,570"){
        
      if (columnBValue < 5500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 5500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }   
    }

    var dd1 = Number.POSITIVE_INFINITY;
    var dd2 = Number.POSITIVE_INFINITY;
    var specChoose = 0;

    if ( option == "£12,571 to £50,270" ){
      for (var l = 1; l <= 4; l++) {
        var deductionBasic = parseInt(targetvalue1 / 6000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(targetvalue1/l-targetColumnValue);
        if (d_target <= dd1 ){
          var dv1 = l;
          dd1 = d_target;        
        }
      }     

      for (var l = 1; l <= 4; l++){
        var deductionBasic = parseInt(columnBValue / 6000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(columnBValue/l - targetColumnValue);
        if(d_target <= dd2){
          var dv2 = l;
          dd2 = d_target;
        }
      }  
    } else if (option == "Less than £12,570"){
      
      for (var l = 1; l <= 4; l++) {
        if(targetvalue1 >= 50000 && targetvalue1 <= 55000){
          var deductionBasic = parseInt(targetvalue1 / 12500);
          
        }else{
          var deductionBasic = parseInt(targetvalue1 / 12500) + 1;
        } 

        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(targetvalue1/l-targetColumnValue);
        if (d_target <= dd1 ){
          var dv1 = l;
          dd1 = d_target;        
        }
      }     
      
      for (var l = 1; l <= 4; l++){
        if(columnBValue >= 50000 && columnBValue <= 55000){
          var deductionBasic = parseInt(columnBValue / 12500);
          
        }else{
          var deductionBasic = parseInt(columnBValue / 12500) + 1;
        }        
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(columnBValue/l - targetColumnValue);
        if(d_target <= dd2){
          var dv2 = l;
          dd2 = d_target;
        }
      }  
    }
     
    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;          
    var method4 = columnBValue;       
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    if (option == "£12,571 to £50,270"){
      for (var j = 0; j < calculatedValues.length; j++){
        var calculatedValue = calculatedValues[j];
        if (calculatedValue >= 6000 ){
          continue;
        }
        var difference = Math.abs(6000 - calculatedValue);

        if (difference <= closestDifference){
          closestMethod = j;
          closestDifference = difference;
        }
      }
    } else if (option == "Less than £12,570"){
      if(columnBValue >= 50000 && columnBValue <= 55000){
        closestMethod = 2;
        specChoose = 1;
      }else{
        if(targetvalue1 >= 50000 && targetvalue1 <= 55000){
          specChoose = 1;
        }
        if (columnBValue >= 11500 && columnBValue <= 12500){
          specChoose = 1;
        }
        for (var j = 0; j < calculatedValues.length; j++){
          var calculatedValue = calculatedValues[j];
          if (calculatedValue >= 12600 ){
            continue;
          }
          var difference = Math.abs(12600 - calculatedValue);

          if (difference <= closestDifference){
            closestMethod = j;
            closestDifference = difference;
          }
        }
      }
    }    
    
    var arr = [0, 1, 2, 3];
    if(specChoose == 0){
      var variations = ['10~20%', '0~10%', '-10~0%', '-20~-10%'];
    } else if ( specChoose == 1){
      var variations = ['-15~-5%', '-25~-15%', '-35~-25%', '-45~-35%'];
    }
    
    var permu = permutation(arr, 4);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
   
    if (targetRowValue == 40000){
      targetRowValue = 30000;
    }

  
    if (option == "£12,571 to £50,270"){
     
      switch (closestMethod) {
        case 0:
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(0);
              result.push(0);
              break;
            case 3: 
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push( getResult(specChoose, method1, selRule[2]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(getResult(specChoose, method1, selRule[2]));
              result.push(getResult(specChoose, method1, selRule[3]));
              break;
          }
          break;
        case 1:
          if (dvd1 == 1){
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);
          } else if (dvd2 == 1){
            result.push(getResult(specChoose, method2, selRule[0]));
            result.push(getResult(specChoose, method2, selRule[1]));
            result.push(getResult(specChoose, method2, selRule[2]));
            result.push(getResult(specChoose, method2, selRule[3]));
          }
          break;
        case 2:
          switch (dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(0);
              result.push(0);
              break;
            case 3:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(getResult(specChoose, method3, selRule[2]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(getResult(specChoose, method3, selRule[2]));
              result.push(getResult(specChoose, method3, selRule[3]));
              break;
          }
          break;
        case 3:
          result.push(getResult(specChoose, method4, selRule[0]));
          result.push(getResult(specChoose, method4, selRule[1]));
          result.push(getResult(specChoose, method4, selRule[2]));
          result.push(getResult(specChoose, method4, selRule[3]));
          break;
      } 
    } else if (option == "Less than £12,570"){     
      
      switch (closestMethod) {       
        case 0:
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(0);
              result.push(0);
              break;
            case 3: 
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(getResult(specChoose, method1, selRule[2]));
              result.push(getResult(specChoose, method1, selRule[3]));
              break;
          }
          break;
        case 1:
          if (dvd1 == 1){
            result.push(method2);
            result.push(0);
            result.push(0);
            result.push(0);
          } else if (dvd2 == 1){
            result.push(getResult(specChoose, method2, selRule[0]));
            result.push(getResult(specChoose, method2, selRule[1]));
            result.push(getResult(specChoose, method2, selRule[2]));
            result.push(getResult(specChoose, method2, selRule[3]));
          }
          break;
        case 2:
          switch (dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(0);
              result.push(0);
              break;
            case 3:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(getResult(specChoose, method3, selRule[2]));
              result.push(0);
              break;
            case 4:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(getResult(specChoose, method3, selRule[2]));              
              result.push(getResult(specChoose,method3,selRule[3]));
              
              break;
          }
          break;
        case 3:
          result.push(getResult(specChoose, method4, selRule[0]));
          result.push(getResult(specChoose, method4, selRule[1]));
          result.push(getResult(specChoose, method4, selRule[2]));
          result.push(getResult(specChoose, method4, selRule[3]));
          break;
      }
    }

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
    
    var countZero = 0;

    for (var i = 0; i < result.length; i++){
      if(result[i] == 0){
        countZero++;
      }
    }

    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    } else if (countZero == 3){
      while ((result[0] != 0) || (result[2] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
       
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }    

    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    
    var pos0_0 = "C" + (setRow);
    var pos0_1 = "D" + (setRow);
    var pos0_2 = "E" + (setRow);
    var pos0_3 = "F" + (setRow);
    var pos0_4 = "G" + (setRow);

    sheet.getRange(pos0_0).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos0_1).setValue(est1.toString() + "%");   
    sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
    sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
    sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5); 

    var pos1_0 = "H" + (setRow);
    var pos1_1 = "I" + (setRow);
    var pos1_2 = "J" + (setRow);
    var pos1_3 = "K" + (setRow);
    var pos1_4 = "L" + (setRow);

    sheet.getRange(pos1_0).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos1_1).setValue(est2.toString() + "%");
    sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
    sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
    sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 

    var pos2_0 = "M" + (setRow);
    var pos2_1 = "N" + (setRow);
    var pos2_2 = "O" + (setRow);
    var pos2_3 = "P" + (setRow);
    var pos2_4 = "Q" + (setRow);

    sheet.getRange(pos2_0).setValue(result[2]);
    var est3 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos2_1).setValue(est3.toString() + "%");
    sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
    sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
    sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

    var pos3_0 = "R" + (setRow);
    var pos3_1 = "S" + (setRow);
    var pos3_2 = "T" + (setRow);
    var pos3_3 = "U" + (setRow);
    var pos3_4 = "V" + (setRow);

    sheet.getRange(pos3_0).setValue(result[3]);
    var est4 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos3_1).setValue(est4.toString() + "%");
    sheet.getRange(pos3_2).setFormula("="+ pos3_0 + "*" + pos3_1);
    sheet.getRange(pos3_3).setFormula("="+ pos3_4 + "-" + pos3_2);
    sheet.getRange(pos3_4).setFormula("="+ pos3_2 + "*" + 5);
      
    sheet.getRange("W"+(setRow)).setValue(newIndex);
   
    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 8000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("X"+(setRow)).setValue(subresult[0]);
    sheet.getRange("Y"+(setRow)).setValue(subresult[1]);
    sheet.getRange("Z"+(setRow)).setValue(subresult[2]);
    sheet.getRange("AA"+(setRow)).setValue(subresult[3]);
    sheet.getRange("AB"+(setRow)).setValue(sum);
    sheet.getRange("AC"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("AD"+(setRow)).setValue(recal);
  }

}

function getResult(specChoose, method, col){  
  
  switch (col){
      case 0:
        if(specChoose == 0 ){
          result = parseFloat((method * (1.1 + Math.random() * 0.1)).toFixed(2));     
        } else if (specChoose == 1 ){
          result = parseFloat((method * (0.85 + Math.random() * 0.1)).toFixed(2));
        }  
                
        break;
      case 1:
        if(specChoose == 0 ){
          result = parseFloat((method * (1 + Math.random() * 0.1)).toFixed(2));          
        }else if (specChoose == 1 ){
          result = parseFloat((method * (0.75 + Math.random() * 0.1)).toFixed(2));
        }
         
        break;
      case 2:
        if(specChoose == 0 ){
          result = parseFloat((method * (0.9 + Math.random() * 0.1)).toFixed(2));       
        }else if (specChoose == 1 ){
          result = parseFloat((method * (0.65 + Math.random() * 0.1)).toFixed(2));
        }          
        break;
      case 3:
        if(specChoose == 0 ){
          result = parseFloat((method * (0.8 + Math.random() * 0.1)).toFixed(2));    
        }else if (specChoose == 1 ){
          result = parseFloat((method * (0.55 + Math.random() * 0.1)).toFixed(2));
        }           
        break;
    }
 
  return result;

}


function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}

//////////////////////////////////////////////////////////////////////////////////////////

///////////////////////  NEW REQUIREMENT UPDATE  /////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////

function onEdit(e){
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("Sheet1");

  const range = e.range;
  var setColumn = range.getColumn();
  var setRow = range.getRow();
  var dvd1 = 0;
  var dvd2 = 0;
  var compResult = [];

  if (setColumn == 2 && setRow != 1){
    var columnBValue = range.getValue();
    var option = sheet.getRange(setRow, 1).getValue();

    if (columnBValue <= 200){
      columnBValue = 200;
    }

    if (option == "£12,571 to £50,270"){
      var targetRowValue = 6000;
      var targetColumnValue = 6000;     
    } else if (option == "Less than £12,570"){      
        targetRowValue = 30000;      
        targetColumnValue = 12500;     
    }

    if(columnBValue % 1 === 0){
      columnBValue = columnBValue + parseFloat((Math.random() * (10.99 - 4) + 4).toFixed(2));         
    }

    if (option == "£12,571 to £50,270"){
      if (columnBValue < 3500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 3500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }
    }else if (option == "Less than £12,570"){
        
      if (columnBValue < 5500){
        dvd1 = 1;
        var targetvalue1 = columnBValue * 10;
      } else if (columnBValue >= 5500){
        dvd2 = 1;
        var targetvalue1 = columnBValue / 10;
      }   
    }

    var dd1 = Number.POSITIVE_INFINITY;
    var dd2 = Number.POSITIVE_INFINITY;
    var specChoose = 0;

    if ( option == "£12,571 to £50,270" ){
      for (var l = 1; l <= 3; l++) {
        var deductionBasic = parseInt(targetvalue1 / 6000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(targetvalue1/l-targetColumnValue);
        if (d_target <= dd1 ){
          var dv1 = l;
          dd1 = d_target;        
        }
      }     

      for (var l = 1; l <= 3; l++){
        var deductionBasic = parseInt(columnBValue / 6000) + 1;
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(columnBValue/l - targetColumnValue);
        if(d_target <= dd2){
          var dv2 = l;
          dd2 = d_target;
        }
      }  
    } else if (option == "Less than £12,570"){
      
      for (var l = 1; l <= 3; l++) {
        if(targetvalue1 >= 50000 && targetvalue1 <= 55000){
          var deductionBasic = parseInt(targetvalue1 / 12500);
          
        }else{
          var deductionBasic = parseInt(targetvalue1 / 12500) + 1;
        } 

        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(targetvalue1/l-targetColumnValue);
        if (d_target <= dd1 ){
          var dv1 = l;
          dd1 = d_target;        
        }
      }     
      
      for (var l = 1; l <= 3; l++){
        if(columnBValue >= 50000 && columnBValue <= 55000){
          var deductionBasic = parseInt(columnBValue / 12500);
          
        }else{
          var deductionBasic = parseInt(columnBValue / 12500) + 1;
        }        
        if(l < deductionBasic){
          continue;
        }
        var d_target = Math.abs(columnBValue/l - targetColumnValue);
        if(d_target <= dd2){
          var dv2 = l;
          dd2 = d_target;
        }
      }  
    }
     
    var calculatedValues = [];

    var method1 = targetvalue1 / dv1;
    if (dvd1 == 1){
      var method2 = 1;
    } else if (dvd2 == 1){
      var method2 = targetvalue1;      
    }      
    var method3 = columnBValue / dv2;          
    var method4 = columnBValue;       
    
    
    var calculatedValues = [];
    calculatedValues.push(method1);
    calculatedValues.push(method2);
    calculatedValues.push(method3);
    calculatedValues.push(method4);
    
    var closestMethod = 0;
    var closestDifference = Number.POSITIVE_INFINITY;
    
    if (option == "£12,571 to £50,270"){
      for (var j = 0; j < calculatedValues.length; j++){
        var calculatedValue = calculatedValues[j];
        if (calculatedValue >= 6000 ){
          continue;
        }
        var difference = Math.abs(6000 - calculatedValue);

        if (difference <= closestDifference){
          closestMethod = j;
          closestDifference = difference;
        }
      }
    } else if (option == "Less than £12,570"){
      if(columnBValue >= 36000 && columnBValue <= 37500){
        closestMethod = 2;
        specChoose = 1;
      }else{
        if(targetvalue1 >= 36000 && targetvalue1 <= 37500){
          specChoose = 1;
        }
        if (columnBValue >= 11500 && columnBValue <= 12500){
          specChoose = 1;
        }
        for (var j = 0; j < calculatedValues.length; j++){
          var calculatedValue = calculatedValues[j];
          if (calculatedValue >= 12600 ){
            continue;
          }
          var difference = Math.abs(12600 - calculatedValue);

          if (difference <= closestDifference){
            closestMethod = j;
            closestDifference = difference;
          }
        }
      }
    }    
    
    var arr = [0, 1, 2, 3];
    if(specChoose == 0){
      var variations = ['10~20%', '0~10%', '-10~0%'];
    } else if ( specChoose == 1){
      var variations = ['-15~-5%', '-25~-15%', '-35~-25%'];
    }
    
    var permu = permutation(arr, 3);

    var rule = Math.round((permu.length-1) * Math.random()) ;

    var selRule = permu[rule]; 
    
    var result = [];
   
  
    if (option == "£12,571 to £50,270"){
     
      switch (closestMethod) {
        case 0:
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);             
              break;
            case 2:
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(0);             
              break;
            case 3: 
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push( getResult(specChoose, method1, selRule[2]));              
              break;           
          }
          break;
        case 1:
          if (dvd1 == 1){
            result.push(method2);
            result.push(0);
            result.push(0);            
          } else if (dvd2 == 1){
            result.push(getResult(specChoose, method2, selRule[0]));
            result.push(getResult(specChoose, method2, selRule[1]));
            result.push(getResult(specChoose, method2, selRule[2]));            
          }
          break;
        case 2:
          switch (dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);              
              break;
            case 2:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(0);
              break;
            case 3:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(getResult(specChoose, method3, selRule[2]));
              break;            
          }
          break;
        case 3:
          result.push(getResult(specChoose, method4, selRule[0]));
          result.push(getResult(specChoose, method4, selRule[1]));
          result.push(getResult(specChoose, method4, selRule[2]));          
          break;
      } 
    } else if (option == "Less than £12,570"){     
      
      switch (closestMethod) {       
        case 0:
          switch (dv1){
            case 1:
              result.push(method1);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(0);
              break;
            case 3: 
              result.push(getResult(specChoose, method1, selRule[0]));
              result.push(getResult(specChoose, method1, selRule[1]));
              result.push(getResult(specChoose, method1, selRule[1]));
              break;
          }
          break;
        case 1:
          if (dvd1 == 1){
            result.push(method2);
            result.push(0);
            result.push(0);
          } else if (dvd2 == 1){
            result.push(getResult(specChoose, method2, selRule[0]));
            result.push(getResult(specChoose, method2, selRule[1]));
            result.push(getResult(specChoose, method2, selRule[2]));
          }
          break;
        case 2:
          switch (dv2){
            case 1:
              result.push(method3);
              result.push(0);
              result.push(0);
              break;
            case 2:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(0);
              break;
            case 3:
              result.push(getResult(specChoose, method3, selRule[0]));
              result.push(getResult(specChoose, method3, selRule[1]));
              result.push(getResult(specChoose, method3, selRule[2]));
              break;
          }
          break;
        case 3:
          result.push(getResult(specChoose, method4, selRule[0]));
          result.push(getResult(specChoose, method4, selRule[1]));
          result.push(getResult(specChoose, method4, selRule[2]));
          break;
      }
    }

    for (var i =0; i<result.length; i++){
      compResult[i] = result[i];
    }
    
    var countZero = 0;

    for (var i = 0; i < result.length; i++){
      if(result[i] == 0){
        countZero++;
      }
    }

    if (countZero == 0){
      result = shuffle(result);
    } else if (countZero == 1) {
      while (result[0] != 0){
        result = shuffle(result);
      }
    } else if (countZero == 2){      
      while ((result[0] != 0) || (result[3] != 0)){
        result = shuffle(result);
      }
    }     

    var newIndex = [];

    for (var i=0; i<result.length; i++){
      for (var j = 0; j<compResult.length; j++){
        if(result[i] == compResult[j]){
          newIndex.push(variations[j]);          
          compResult[j] = 1;
          break;
        }
      }
    }
       
    
    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        result[i] = '';
      }
    }    

    newIndex = newIndex.toString();

    if ((closestMethod == 1 && dvd1 == 1) || closestMethod == 3){
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    } else {
      sheet.getRange("B"+(setRow)).setValue(columnBValue);
    }
    
    var pos0_0 = "C" + (setRow);
    var pos0_1 = "D" + (setRow);
    var pos0_2 = "E" + (setRow);
    var pos0_3 = "F" + (setRow);
    var pos0_4 = "G" + (setRow);

    sheet.getRange(pos0_0).setValue(result[0]);
    var est1 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos0_1).setValue(est1.toString() + "%");   
    sheet.getRange(pos0_2).setFormula("="+ pos0_0 + "*" + pos0_1);
    sheet.getRange(pos0_3).setFormula("="+ pos0_4 + "-" + pos0_2);
    sheet.getRange(pos0_4).setFormula("="+ pos0_2 + "*" + 5); 

    var pos1_0 = "H" + (setRow);
    var pos1_1 = "I" + (setRow);
    var pos1_2 = "J" + (setRow);
    var pos1_3 = "K" + (setRow);
    var pos1_4 = "L" + (setRow);

    sheet.getRange(pos1_0).setValue(result[1]);
    var est2 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos1_1).setValue(est2.toString() + "%");
    sheet.getRange(pos1_2).setFormula("="+ pos1_0 + "*" + pos1_1); 
    sheet.getRange(pos1_3).setFormula("="+ pos1_4 + "-" + pos1_2);
    sheet.getRange(pos1_4).setFormula("="+ pos1_2 + "*" + 5); 

    var pos2_0 = "M" + (setRow);
    var pos2_1 = "N" + (setRow);
    var pos2_2 = "O" + (setRow);
    var pos2_3 = "P" + (setRow);
    var pos2_4 = "Q" + (setRow);

    sheet.getRange(pos2_0).setValue(result[2]);
    var est3 = (Math.random()*1.5 + 11).toFixed(4);   
    sheet.getRange(pos2_1).setValue(est3.toString() + "%");
    sheet.getRange(pos2_2).setFormula("="+ pos2_0 + "*" + pos2_1);
    sheet.getRange(pos2_3).setFormula("="+ pos2_4 + "-" + pos2_2);
    sheet.getRange(pos2_4).setFormula("="+ pos2_2 + "*" + 5);

    sheet.getRange("R"+(setRow)).setValue(newIndex);
   
    var subresult = [];
    for (var i = 0; i<result.length; i++){
      subresult[i] = parseFloat(result[i] * 0.11).toFixed(2);
    }

    if ( targetRowValue == 6000 ){
      for (var i = 0; i < subresult.length; i++){
        if (+subresult[i] > 200){
          subresult[i] = '200';
        }
      }
    }
    
    var sum = 0;
    var count = 0;
    for (var i = 0; i < subresult.length; i++){
      if (subresult[i] != 0){
        count++;
      }
      sum = sum + +subresult[i];
    }

    for (var i = 0; i < result.length; i++){
      if ( result[i] == 0 ){
        subresult[i] = '';
      }
    }

    sheet.getRange("S"+(setRow)).setValue(subresult[0]);
    sheet.getRange("T"+(setRow)).setValue(subresult[1]);
    sheet.getRange("U"+(setRow)).setValue(subresult[2]);
    sheet.getRange("V"+(setRow)).setValue(subresult[3]);
    sheet.getRange("W"+(setRow)).setValue(sum);
    sheet.getRange("X"+(setRow)).setValue(count);
    
    if (closestMethod ==0  || closestMethod == 1){
      var recal = targetvalue1;
    } else if (closestMethod == 2 || closestMethod == 3){
      var recal = columnBValue;
    }

    sheet.getRange("Y"+(setRow)).setValue(recal);
  }

}

function getResult(specChoose, method, col){  
  
  switch (col){
      case 0:
        if(specChoose == 0 ){
          result = parseFloat((method * (1.1 + Math.random() * 0.1)).toFixed(2));     
        } else if (specChoose == 1 ){
          result = parseFloat((method * (0.85 + Math.random() * 0.1)).toFixed(2));
        }  
                
        break;
      case 1:
        if(specChoose == 0 ){
          result = parseFloat((method * (1 + Math.random() * 0.1)).toFixed(2));          
        }else if (specChoose == 1 ){
          result = parseFloat((method * (0.75 + Math.random() * 0.1)).toFixed(2));
        }
         
        break;
      case 2:
        if(specChoose == 0 ){
          result = parseFloat((method * (0.9 + Math.random() * 0.1)).toFixed(2));       
        }else if (specChoose == 1 ){
          result = parseFloat((method * (0.65 + Math.random() * 0.1)).toFixed(2));
        }          
        break;
      
    }
 
  return result;

}


function shuffle(array) {
  var curIndex = array.length;
  var randIndex = 0; 

  while (curIndex != 0) {

    randIndex = Math.floor(Math.random() * curIndex);
    curIndex--;

    [array[curIndex], array[randIndex]] = [
      array[randIndex], array[curIndex]];
     
  }

  return array;
}

function permutation(arr, len){  
  var result = [];

  var f = function(prefix, arr) {
    for (var i = 0; i < arr.length; i++) {
      var elem = [...prefix, arr[i]];
      if(elem.length == len)
        result.push(elem);
      f(elem, arr.slice(i + 1));
    }
  }
  
  f([], arr);
  return result;
}




























